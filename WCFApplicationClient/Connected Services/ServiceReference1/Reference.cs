//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WCFApplicationClient.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Book", Namespace="http://schemas.datacontract.org/2004/07/BookNS")]
    [System.SerializableAttribute()]
    public partial class Book : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string Authork__BackingFieldField;
        
        private int Idk__BackingFieldField;
        
        private double Pricek__BackingFieldField;
        
        private string Titlek__BackingFieldField;
        
        private int Yeark__BackingFieldField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<Author>k__BackingField", IsRequired=true)]
        public string Authork__BackingField {
            get {
                return this.Authork__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.Authork__BackingFieldField, value) != true)) {
                    this.Authork__BackingFieldField = value;
                    this.RaisePropertyChanged("Authork__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<Id>k__BackingField", IsRequired=true)]
        public int Idk__BackingField {
            get {
                return this.Idk__BackingFieldField;
            }
            set {
                if ((this.Idk__BackingFieldField.Equals(value) != true)) {
                    this.Idk__BackingFieldField = value;
                    this.RaisePropertyChanged("Idk__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<Price>k__BackingField", IsRequired=true)]
        public double Pricek__BackingField {
            get {
                return this.Pricek__BackingFieldField;
            }
            set {
                if ((this.Pricek__BackingFieldField.Equals(value) != true)) {
                    this.Pricek__BackingFieldField = value;
                    this.RaisePropertyChanged("Pricek__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<Title>k__BackingField", IsRequired=true)]
        public string Titlek__BackingField {
            get {
                return this.Titlek__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.Titlek__BackingFieldField, value) != true)) {
                    this.Titlek__BackingFieldField = value;
                    this.RaisePropertyChanged("Titlek__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<Year>k__BackingField", IsRequired=true)]
        public int Yeark__BackingField {
            get {
                return this.Yeark__BackingFieldField;
            }
            set {
                if ((this.Yeark__BackingFieldField.Equals(value) != true)) {
                    this.Yeark__BackingFieldField = value;
                    this.RaisePropertyChanged("Yeark__BackingField");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.ILibrary")]
    public interface ILibrary {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILibrary/AllBooks", ReplyAction="http://tempuri.org/ILibrary/AllBooksResponse")]
        WCFApplicationClient.ServiceReference1.Book[] AllBooks();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILibrary/AllBooks", ReplyAction="http://tempuri.org/ILibrary/AllBooksResponse")]
        System.Threading.Tasks.Task<WCFApplicationClient.ServiceReference1.Book[]> AllBooksAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILibrary/AddBook", ReplyAction="http://tempuri.org/ILibrary/AddBookResponse")]
        void AddBook(WCFApplicationClient.ServiceReference1.Book book);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILibrary/AddBook", ReplyAction="http://tempuri.org/ILibrary/AddBookResponse")]
        System.Threading.Tasks.Task AddBookAsync(WCFApplicationClient.ServiceReference1.Book book);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILibrary/UpdatePrice", ReplyAction="http://tempuri.org/ILibrary/UpdatePriceResponse")]
        void UpdatePrice(WCFApplicationClient.ServiceReference1.Book book, double newPrice);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILibrary/UpdatePrice", ReplyAction="http://tempuri.org/ILibrary/UpdatePriceResponse")]
        System.Threading.Tasks.Task UpdatePriceAsync(WCFApplicationClient.ServiceReference1.Book book, double newPrice);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILibraryChannel : WCFApplicationClient.ServiceReference1.ILibrary, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LibraryClient : System.ServiceModel.ClientBase<WCFApplicationClient.ServiceReference1.ILibrary>, WCFApplicationClient.ServiceReference1.ILibrary {
        
        public LibraryClient() {
        }
        
        public LibraryClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public LibraryClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LibraryClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LibraryClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public WCFApplicationClient.ServiceReference1.Book[] AllBooks() {
            return base.Channel.AllBooks();
        }
        
        public System.Threading.Tasks.Task<WCFApplicationClient.ServiceReference1.Book[]> AllBooksAsync() {
            return base.Channel.AllBooksAsync();
        }
        
        public void AddBook(WCFApplicationClient.ServiceReference1.Book book) {
            base.Channel.AddBook(book);
        }
        
        public System.Threading.Tasks.Task AddBookAsync(WCFApplicationClient.ServiceReference1.Book book) {
            return base.Channel.AddBookAsync(book);
        }
        
        public void UpdatePrice(WCFApplicationClient.ServiceReference1.Book book, double newPrice) {
            base.Channel.UpdatePrice(book, newPrice);
        }
        
        public System.Threading.Tasks.Task UpdatePriceAsync(WCFApplicationClient.ServiceReference1.Book book, double newPrice) {
            return base.Channel.UpdatePriceAsync(book, newPrice);
        }
    }
}
